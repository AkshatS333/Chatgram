- in this we are given challenge to implement getUser and getUsersInRoom

- Challenge
1. create getUser, accept id and return user object and if not return undefined
2. create getUsersInRoom. accept room name and return array of users(or empty array)

- worked in src->utils->users.js


***********src->utils->users.js

const users = []

// addUser, removeUser, getUser, getUsersInRoom

const addUser = ({id, username,room})=>{

    // clean the data
    username= username.trim().toLowerCase()
    room = room.trim().toLowerCase()


    // Validate the data
    if(!username || !room){
        return {
            error: 'Username and room are required!'
        }
    }


    // Check for existing user
    const existingUser= users.find((user)=>{
        return user.room===room && user.username === username
    })
    // if match is found, it returns the array item back


    // Validate username
    if(existingUser){
        return{
            error: 'Username is in use!'
        }
    }


    // Store user
    const user ={id, username, room}
    users.push(user)
    return {user}

}



// to test

addUser({
    id:3,
    username: 'surya',
    room: 'mumbai'
})

// console.log(users)

const res =addUser({
    id: 4,
    username: 'cheeku',
    room: 'delhi'
})

// console.log(res)


const removeUser = (id) =>{
    const index= users.findIndex((user)=>{
        return user.id===id
    })

    if(index!==-1){
        return users.splice(index,1)[0]
    }
}


const getUser = (id) =>{
    const user = users.find((user)=>{
        return user.id === id
    })

    if(user){
        return user
    }
    return undefined
}

// console.log(getUser(3))



const getUsersInRoom= (room) =>{
    const usersGrp = users.filter((user)=>{
        return user.room===room
    })

    if(usersGrp){
        return usersGrp
    }
    return []

}



addUser({
    id:5,
    username: 'rahane',
    room: 'mumbai'
})

addUser({
    id:6,
    username: 'rohit',
    room: 'mumbai'
})


console.log(getUsersInRoom('mumbai'))